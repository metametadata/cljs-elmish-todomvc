;; Analyzed by ClojureScript 1.7.170
{:use-macros {match cljs.core.match}, :excludes #{}, :name frontend.persistence-middleware, :imports nil, :requires {cljs.core.match cljs.core.match}, :uses nil, :defs {wrap-control {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-todomvc/src/frontend/persistence-middleware.cljs", :line 6, :column 7, :end-line 6, :end-column 19, :arglists (quote ([control load-signal storage key load-blacklist])), :doc "On load-signal middleware will load the model from storage and send the signal further with updated model to the component.\n  Blacklist should contain model keys which will not be loaded from storage."}, :name frontend.persistence-middleware/wrap-control, :variadic false, :file "src/frontend/persistence-middleware.cljs", :end-column 19, :method-params ([control load-signal storage key load-blacklist]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 5, :fn-var true, :arglists (quote ([control load-signal storage key load-blacklist])), :doc "On load-signal middleware will load the model from storage and send the signal further with updated model to the component.\n  Blacklist should contain model keys which will not be loaded from storage."}, wrap-reconcile {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-todomvc/src/frontend/persistence-middleware.cljs", :line 24, :column 7, :end-line 24, :end-column 21, :arglists (quote ([reconcile storage key save-blacklist])), :doc "Blacklist should contain model keys which will not be saved to storage."}, :name frontend.persistence-middleware/wrap-reconcile, :variadic false, :file "src/frontend/persistence-middleware.cljs", :end-column 21, :method-params ([reconcile storage key save-blacklist]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 4, :fn-var true, :arglists (quote ([reconcile storage key save-blacklist])), :doc "Blacklist should contain model keys which will not be saved to storage."}}, :require-macros {cljs.core.match cljs.core.match}, :cljs.analyzer/constants {:seen #{:else :not-found :reset-from-storage}, :order [:not-found :reset-from-storage :else]}, :doc nil}