;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name frontend.ui, :imports nil, :requires {r reagent.core, reagent.core reagent.core, cljs.pprint cljs.pprint}, :uses nil, :defs {connect {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-todomvc/src/frontend/ui.cljs", :line 7, :column 7, :end-line 7, :end-column 14, :arglists (quote ([[model signal :as _initial_] view-model view control reconcile])), :doc "Initial model must be immutable. Initial signal can be nil if it should not be fired.\n  Control can be a non-pure function.\n  View-model, view and reconcile must be pure functions.\n\n  Returns a map with:\n      :view,\n      :dispatch-signal (it can be used to dispatch signal not only from the view),\n      :model ratom (this is exposed mainly for debugging),\n      :dispatch-action (this is exposed mainly for debugging).\n\n  Automatically fires an :on-connect signal.\n\n  Data flow:\n  model -> (view-model) -> (view) -signal-> (control) -action-> (reconcile) -> model -> etc."}, :name frontend.ui/connect, :variadic false, :file "/Users/yuri/Dropbox/dev/cljs-elmish-todomvc/src/frontend/ui.cljs", :end-column 14, :method-params ([p__92555 view-model view control reconcile]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 5, :fn-var true, :arglists (quote ([[model signal :as _initial_] view-model view control reconcile])), :doc "Initial model must be immutable. Initial signal can be nil if it should not be fired.\n  Control can be a non-pure function.\n  View-model, view and reconcile must be pure functions.\n\n  Returns a map with:\n      :view,\n      :dispatch-signal (it can be used to dispatch signal not only from the view),\n      :model ratom (this is exposed mainly for debugging),\n      :dispatch-action (this is exposed mainly for debugging).\n\n  Automatically fires an :on-connect signal.\n\n  Data flow:\n  model -> (view-model) -> (view) -signal-> (control) -action-> (reconcile) -> model -> etc."}, tagged {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-todomvc/src/frontend/ui.cljs", :line 36, :column 7, :end-line 36, :end-column 13, :arglists (quote ([f tag])), :doc "Function decorator which prepends a tag to the single argument.\n  I.e. it transforms an arg x to [tag x]."}, :name frontend.ui/tagged, :variadic false, :file "/Users/yuri/Dropbox/dev/cljs-elmish-todomvc/src/frontend/ui.cljs", :end-column 13, :method-params ([f tag]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f tag])), :doc "Function decorator which prepends a tag to the single argument.\n  I.e. it transforms an arg x to [tag x]."}, wrap-log-signals {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-todomvc/src/frontend/ui.cljs", :line 45, :column 7, :end-line 45, :end-column 23, :arglists (quote ([control]))}, :name frontend.ui/wrap-log-signals, :variadic false, :file "/Users/yuri/Dropbox/dev/cljs-elmish-todomvc/src/frontend/ui.cljs", :end-column 23, :method-params ([control]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists (quote ([control]))}, wrap-log-actions {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-todomvc/src/frontend/ui.cljs", :line 53, :column 7, :end-line 53, :end-column 23, :arglists (quote ([reconcile]))}, :name frontend.ui/wrap-log-actions, :variadic false, :file "/Users/yuri/Dropbox/dev/cljs-elmish-todomvc/src/frontend/ui.cljs", :end-column 23, :method-params ([reconcile]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 1, :fn-var true, :arglists (quote ([reconcile]))}}, :require-macros {cljs.pprint cljs.pprint}, :cljs.analyzer/constants {:seen #{:dispatch-action :dispatch-signal :view :model}, :order [:view :dispatch-signal :model :dispatch-action]}, :doc nil}