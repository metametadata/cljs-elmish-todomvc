;; Analyzed by ClojureScript 1.7.170
{:use-macros {reaction reagent.ratom}, :excludes #{}, :name frontend.ui, :imports nil, :requires {r reagent.core, reagent.core reagent.core, cljs.pprint cljs.pprint}, :uses nil, :defs {connect-reagent {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-todomvc/src/frontend/ui.cljs", :line 8, :column 7, :end-line 8, :end-column 22, :arglists (quote ([{:keys [init view-model view control reconcile], :as _spec_} init-args])), :doc "Given a component spec map returns a connected component which can be rendered using Reagent.\n\n  :control can be a non-pure function, :init, :view-model, :view and :reconcile must be pure functions.\n\n  init-args will be passed to :init function.\n\n  Dispatches :on-connect signal and returns a map with:\n      :view (Reagent view function),\n      :dispatch-signal (it can be used to dispatch signals not only from the view),\n      :model ratom (this is exposed mainly for debugging),\n      :dispatch-action (this is exposed mainly for debugging).\n\n  Data flow:\n  (init)\n  |\n  V\n  model -> (view-model) -> (view) -signal-> (control) -action-> (reconcile) -> model -> etc."}, :name frontend.ui/connect-reagent, :variadic false, :file "/Users/yuri/Dropbox/dev/cljs-elmish-todomvc/src/frontend/ui.cljs", :end-column 22, :method-params ([p__49335 init-args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [init view-model view control reconcile], :as _spec_} init-args])), :doc "Given a component spec map returns a connected component which can be rendered using Reagent.\n\n  :control can be a non-pure function, :init, :view-model, :view and :reconcile must be pure functions.\n\n  init-args will be passed to :init function.\n\n  Dispatches :on-connect signal and returns a map with:\n      :view (Reagent view function),\n      :dispatch-signal (it can be used to dispatch signals not only from the view),\n      :model ratom (this is exposed mainly for debugging),\n      :dispatch-action (this is exposed mainly for debugging).\n\n  Data flow:\n  (init)\n  |\n  V\n  model -> (view-model) -> (view) -signal-> (control) -action-> (reconcile) -> model -> etc."}, connect-reactive-reagent {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-todomvc/src/frontend/ui.cljs", :line 41, :column 7, :end-line 41, :end-column 31, :arglists (quote ([{:keys [init view-model view control reconcile], :as _spec_} init-args])), :doc "Works the same as connect-reagent, but view-model now receives a model ratom and is expected to return Reagent reactions.\n  Inspired by re-frame subscriptions, see: https://github.com/Day8/re-frame#subscribe\n\n  This approach allows tweaking view-model/view code for better performance."}, :name frontend.ui/connect-reactive-reagent, :variadic false, :file "/Users/yuri/Dropbox/dev/cljs-elmish-todomvc/src/frontend/ui.cljs", :end-column 31, :method-params ([p__49340 init-args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [init view-model view control reconcile], :as _spec_} init-args])), :doc "Works the same as connect-reagent, but view-model now receives a model ratom and is expected to return Reagent reactions.\n  Inspired by re-frame subscriptions, see: https://github.com/Day8/re-frame#subscribe\n\n  This approach allows tweaking view-model/view code for better performance."}, tagged {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-todomvc/src/frontend/ui.cljs", :line 62, :column 7, :end-line 62, :end-column 13, :arglists (quote ([f tag])), :doc "Function decorator which prepends a tag to the single argument.\n  I.e. it transforms an arg x to [tag x]."}, :name frontend.ui/tagged, :variadic false, :file "/Users/yuri/Dropbox/dev/cljs-elmish-todomvc/src/frontend/ui.cljs", :end-column 13, :method-params ([f tag]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f tag])), :doc "Function decorator which prepends a tag to the single argument.\n  I.e. it transforms an arg x to [tag x]."}, track-keys {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-todomvc/src/frontend/ui.cljs", :line 70, :column 7, :end-line 70, :end-column 17, :arglists (quote ([map-ratom keyseq])), :doc "Returns a map containing Reagent reactions to map entries specified by keys."}, :name frontend.ui/track-keys, :variadic false, :file "/Users/yuri/Dropbox/dev/cljs-elmish-todomvc/src/frontend/ui.cljs", :end-column 17, :method-params ([map-ratom keyseq]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 2, :fn-var true, :arglists (quote ([map-ratom keyseq])), :doc "Returns a map containing Reagent reactions to map entries specified by keys."}, wrap-log {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-todomvc/src/frontend/ui.cljs", :line 78, :column 7, :end-line 78, :end-column 15, :arglists (quote ([spec]))}, :name frontend.ui/wrap-log, :variadic false, :file "/Users/yuri/Dropbox/dev/cljs-elmish-todomvc/src/frontend/ui.cljs", :end-column 15, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec]))}}, :require-macros {reagent.ratom reagent.ratom, cljs.pprint cljs.pprint}, :cljs.analyzer/constants {:seen #{:on-connect :init :dispatch-action :dispatch-signal :control :view-model :reconcile :view :model}, :order [:init :view-model :view :control :reconcile :on-connect :dispatch-signal :model :dispatch-action]}, :doc nil}